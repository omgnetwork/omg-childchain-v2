version: 2.1
jobs:

  build:
    working_directory: ~/childchain
    docker:
      - image: circleci/elixir:1.10.2
      - image: circleci/postgres:12-alpine
        environment:
          POSTGRES_USER: omisego_dev
          POSTGRES_PASSWORD: omisego_dev
          POSTGRES_DB: engine_repo_test
          CIRLCECI: true
    environment:
      MIX_ENV: test
    steps:
      - checkout
      - run: mix local.rebar --force && mix local.hex --force
      - restore_cache:
          key: v2-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run: mix do deps.get, compile --warnings-as-errors --force
      - save_cache:
          key: v2-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths:
            - "deps"
            - "_build"

  test:
    working_directory: ~/childchain
    docker:
      - image: circleci/elixir:1.10.2
      - image: circleci/postgres:12-alpine
        environment:
          POSTGRES_USER: omisego_dev
          POSTGRES_PASSWORD: omisego_dev
          POSTGRES_DB: engine_repo_test
          CIRLCECI: true
    environment:
      MIX_ENV=test
    steps:
      - checkout
      - run: mix local.rebar --force && mix local.hex --force
      - restore_cache:
          key: v2-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run: mix test

  integration:
    working_directory: ~/childchain
    machine:
      image: ubuntu-1604:201903-01
    environment:
      MIX_ENV=test
    steps:
      - checkout
      - run: docker-compose up -d postgres
      - restore_cache:
          key: v2-asdf-install
      - run:
          name: Install Erlang and Elixir
          command: |
            [ -d ~/.asdf-vm ] || git clone https://github.com/asdf-vm/asdf.git ~/.asdf-vm --branch v0.7.4
            echo 'source ~/.asdf-vm/asdf.sh' >> $BASH_ENV
            source $BASH_ENV
            asdf plugin-add erlang || asdf plugin-update erlang
            asdf plugin-add elixir || asdf plugin-update elixir
            asdf install erlang 22.3
            asdf install elixir 1.10.2
            asdf global elixir 1.10.2
            asdf global erlang 22.3
          no_output_timeout: 2400
      - save_cache:
          key: v2-asdf-install
          paths:
            - ~/.asdf
            - ~/.asdf-vm
      - run: make init-contracts
      - run: mix local.rebar --force && mix local.hex --force
      - restore_cache:
          key: v2-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run: mix test.integration

  credo:
    working_directory: ~/childchain
    docker:
      - image: circleci/elixir:1.10.2
    environment:
      MIX_ENV=test
    steps:
      - checkout
      - run: mix local.rebar --force && mix local.hex --force
      - restore_cache:
          key: v2-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run: mix do credo --strict, format --check-formatted --dry-run
      - run:
          name: "Consistent naming of TX_HASH - it's tx_hash not txhash"
          command: |
            export SHELL=/bin/bash
            set +eo pipefail
            _counter=$(grep -ri "txhash" . | grep -c "txhash")
            echo "Current occurrences of txhash:"
            echo $_counter
            if [ $_counter -gt 3 ]; then
              echo "Have you been naughty or nice? Find out if Santa knows."
              exit 1
            fi 

  dialyzer:
    working_directory: ~/childchain
    docker:
      - image: circleci/elixir:1.10.2
    environment:
      MIX_ENV=dev
    steps:
      - checkout
      - run: mix local.rebar --force && mix local.hex --force
      - restore_cache:
          key: v2-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - restore_cache:
          key: v1-dialyzer-plts-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run:
          name: Unpack PLT cache
          command: |
            mkdir -p _build/dev
            cp plts/dialyxir*.plt _build/dev/ || true
            mkdir -p ~/.mix
            cp plts/dialyxir*.plt ~/.mix/ || true
      - run:
          name: Dialyzer
          command: |
            mix dialyzer
          no_output_timeout: 2400
      - run:
          name: Pack PLT cache
          command: |
            mkdir -p plts
            cp _build/dev/dialyxir*.plt plts/
            cp ~/.mix/dialyxir*.plt plts/
      - save_cache:
          key: v1-dialyzer-plts-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths:
            - "plts"

workflows:
  version: 2
  build-test-lint:
    jobs:
      - build
      - test:
          requires:
            - build

      - integration:
          requires:
            - build

      - credo:
          requires:
            - build

      - dialyzer:
          requires:
            - build
