version: 2.1
commands:
  gcloud_login:
    steps:
      - run: |
          echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
          gcloud auth configure-docker --quiet

  docker_compose_release:
    parameters:
      enterprise:
        default: "0"
        type: string
    description: "Builds a docker image"
    steps:
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: pip3 install docker-compose --upgrade
      - gcloud_login
      - run:
          environment:
            ENTERPRISE: <<parameters.enterprise>>
          command: make docker-childchain
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - run:
          name: Setup data dir
          command: |
            [ -d data ] || mkdir data && chmod 777 data
      - run:
          name: Setup for ENTERPRISE=1
          command: |
            echo "WALLET_NAME=plasma-deployer" >> dynamic_env_vars.env
            echo "VAULT_URL=https://172.27.0.111:8200" >> dynamic_env_vars.env
            echo "INSECURE_VAULT_TLS=true" >> dynamic_env_vars.env
            echo "ENTERPRISE=<<parameters.enterprise>>" >> dynamic_env_vars.env
      - run:
          name: Start daemon services
          command: |
            docker-compose -f docker-compose.yml -f docker-compose.specs.yml up -d || (START_RESULT=$?; docker-compose logs; exit $START_RESULT;)
      - run:
          name: Log
          command: docker-compose logs -f
          background: true
      - run:
          name: Print docker states
          command: |
            docker image ls
            docker-compose ps
      - pull_childchain_health:
          port: 9656
      - install_elixir:
          cache: "specs"
          dir: "priv/cabbage"
      - install_rust
      - pull_childchain_health:
          port: "9656"
      - run:
          name: Setup specs
          environment:
            CHILD_CHAIN_URL: http://127.0.0.1:9656/v1
            EXIT_ID_SIZE: "168"
            LOCALCHAIN_CONTRACT_ADDRESSES: "/home/circleci/project/localchain_contract_addresses.env"
            PLASMA_CONTRACTS_DIR: "/home/circleci/project/data/plasma-contracts/contracts/"
            FEE_CLAIMER_ADDRESS: "0x24F3402Cd22F03ff81B56941fE048AD0F4EED5A1"
            MIX_ENV: test
          command: |
            cd priv/cabbage
            make install
            make generate_api_code
            mix deps.get
            mix compile
      - run:
          name: Run specs
          environment:
            CHILD_CHAIN_URL: http://127.0.0.1:9656/v1
            EXIT_ID_SIZE: "168"
            LOCALCHAIN_CONTRACT_ADDRESSES: "/home/circleci/project/localchain_contract_addresses.env"
            PLASMA_CONTRACTS_DIR: "/home/circleci/project/data/plasma-contracts/contracts/"
            FEE_CLAIMER_ADDRESS: "0x24F3402Cd22F03ff81B56941fE048AD0F4EED5A1"
          command: |
            cd priv/cabbage
            grep -r "@moduletag" ./apps/itest/ | awk '{print "--include " $3}' | tr -d ':' > tags.txt
            echo $(circleci tests split ./tags.txt)
            circleci tests split ./tags.txt > /tmp/tests-to-run
            mix test --exclude test $(cat /tmp/tests-to-run)

  pull_childchain_health:
    parameters:
      port:
        default: 9756
        type: integer
    steps:
      - run:
          name: Check if Childchain got back up
          command: |
            attempt_counter=0
            max_attempts=25
            until $(curl -v --silent http://localhost:<<parameters.port>>/v1/health.check 2>&1 | grep -q 200); do
              echo "Response was:"
              curl -is -X GET http://localhost:<<parameters.port>>/v1/health.check
              if [ ${attempt_counter} -eq ${max_attempts} ];then
                echo "Max attempts reached"
                exit 1
              fi
              echo "------------------------------"
              printf 'Trying again.'
              attempt_counter=$(($attempt_counter+1))
              sleep 5
            done
            curl -is -X GET http://localhost:<<parameters.port>>/v1/health.check

  install_elixir:
    parameters:
      cache:
        default: ""
        type: string
      dir:
        default: ""
        type: string
    description: Install Erlang and Elixir
    steps:
      - restore_cache:
          key: v4-asdf-install-<<parameters.cache>>
      - run:
          name: Install Erlang and Elixir
          command: |
            cd <<parameters.dir>>
            [ -d ~/.asdf-vm ] || git clone https://github.com/asdf-vm/asdf.git ~/.asdf-vm --branch v0.8.0
            echo 'source ~/.asdf-vm/asdf.sh' >> $BASH_ENV
            source $BASH_ENV
            asdf plugin-add erlang || asdf plugin-update erlang
            asdf plugin-add elixir || asdf plugin-update elixir
            asdf install
            mix local.rebar --force && mix local.hex --force
          no_output_timeout: 2400
      - save_cache:
          key: v4-asdf-install-<<parameters.cache>>
          paths:
            - ~/.asdf
            - ~/.asdf-vm
      - restore_cache:
          key: v2-mix-specs-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
  add_rust_to_path:
    description: "Add path to PATH env var"
    steps:
      - run:
          name: Add rust to PATH env
          command: echo 'export PATH=~/.cargo/bin/:$PATH' >> $BASH_ENV
  install_rust:
    description: "Install Rust"
    steps:
      - run:
          name: Install Rust
          command: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - add_rust_to_path

jobs:
  build:
    working_directory: ~/childchain
    docker:
      - image: circleci/elixir:1.11.2
      - image: circleci/postgres:12-alpine
        environment:
          POSTGRES_USER: omisego_dev
          POSTGRES_PASSWORD: omisego_dev
          POSTGRES_DB: engine_repo_test
          CIRLCECI: true
    environment:
      MIX_ENV: test
    steps:
      - checkout
      - run:
          name: "Don't commit private deps!"
          command: |
            export SHELL=/bin/bash
            set +eo pipefail
            grep "submit_block\|submit_block_vault\|gas" mix.lock
            if [[ $? -eq 1 ]]
            then
              echo "You're OK."
              exit 0
            else
              echo "What did you do?"
              exit 1
            fi
      - install_rust
      - run: mix local.rebar --force && mix local.hex --force
      - restore_cache:
          key: v4-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run: mix deps.get
      - run: mix deps.compile
      - run: mix do compile --warnings-as-errors --force
      - save_cache:
          key: v4-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths:
            - "deps"
            - "_build"
            - "~/.cargo/"

  test:
    working_directory: ~/childchain
    docker:
      - image: circleci/elixir:1.11.2
      - image: circleci/postgres:12-alpine
        environment:
          POSTGRES_USER: omisego_dev
          POSTGRES_PASSWORD: omisego_dev
          POSTGRES_DB: engine_repo_test
          CIRLCECI: true
    environment:
      MIX_ENV: test
    steps:
      - add_rust_to_path
      - checkout
      - run: mix local.rebar --force && mix local.hex --force
      - restore_cache:
          key: v4-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run: mix test

  integration:
    working_directory: ~/childchain
    machine:
      image: ubuntu-2004:202010-01
    environment:
      MIX_ENV: test
    steps:
      - checkout
      - install_rust
      - run: make init-contracts
      - run:
          name: Setup data dir
          command: chmod -R 777 data
      - run: docker-compose up -d postgres
      - install_elixir:
          cache: "integration"
          dir: "~/childchain"
      - gcloud_login
      - run: mix deps.get
      - run: docker-compose pull geth
      - run: mix test.integration

  integration_vault:
    working_directory: ~/childchain
    machine:
      image: ubuntu-2004:202010-01
    environment:
      MIX_ENV: test
      ENTERPRISE: 1
    steps:
      - checkout
      - install_rust
      - run: make init-contracts-vault
      - run:
          name: Setup data dir
          command: chmod -R 777 data
      - run: docker-compose up -d postgres
      - install_elixir:
          cache: "integration"
          dir: "~/childchain"
      - gcloud_login
      - restore_cache:
          keys:
            - v2-mix-cache-test-integration_vault-{{ checksum "mix.lock" }}
      - run:
          name: Get enteprise deps
          command: mix deps.get
      - run:
          name: Compile
          environment:
            MIX_ENV: test
          command: mix compile
      - save_cache:
          key: v2-mix-cache-test-integration_vault-{{ checksum "mix.lock" }}
          paths:
            - deps
            - _build
      - run:
          name: Run Vault integration test
          command: mix test.integration_block_submission_vault

  integration_send_raw_eth_transaction:
    working_directory: ~/childchain
    machine:
      image: ubuntu-2004:202010-01
    environment:
      MIX_ENV: test
      ENTERPRISE: 0
    steps:
      - checkout
      - install_rust
      - run: make init-contracts
      - run:
          name: Setup data dir
          command: chmod -R 777 data
      - run: docker-compose up -d postgres
      - install_elixir:
          cache: "integration"
          dir: "~/childchain"
      - gcloud_login
      - run:
          name: Get deps
          command: mix deps.get
      - run:
          name: Run integration test
          command: mix test.integration_block_submission

  test_docker_compose_release_public:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      SNAPSHOT: SNAPSHOT_MIX_EXIT_PERIOD_SECONDS_120
    parallelism: 4
    steps:
      - checkout
      - run: make init-contracts
      - run:
          name: Setup data dir
          command: chmod -R 777 data
      - docker_compose_release:
          enterprise: "0"

  test_docker_compose_release_private:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      SNAPSHOT: SNAPSHOT_MIX_EXIT_PERIOD_SECONDS_120
    parallelism: 4
    steps:
      - checkout
      - run: make init-contracts-vault
      - run:
          name: Setup data dir
          command: chmod -R 777 data
      - docker_compose_release:
          enterprise: "1"

  development:
    working_directory: ~/childchain
    machine:
      image: ubuntu-2004:202010-01
    environment:
      FEE_FEED_URL: http://172.27.0.110/file.json
      ENTERPRISE: 0
      PORT: 9756
    steps:
      - checkout
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: pip3 install docker-compose --upgrade
      - gcloud_login
      - run:
          command: make init-contracts
          background: true
      - run:
          command: docker-compose up -d nginx postgres geth feefeed
          background: true
      - run:
          name: Docker logs
          command: docker-compose logs -f
          background: true
      - install_rust
      - run:
          name: Installing elixir via apt (asdf breaks iex -S mix)
          command: |
            wget https://packages.erlang-solutions.com/erlang-solutions_2.0_all.deb && sudo dpkg -i erlang-solutions_2.0_all.deb
            sudo apt-get update
            sudo apt-get install esl-erlang=1:23.0.3-1
            sudo apt-get install elixir=1.10.4-1
            mix local.rebar --force && mix local.hex --force
      - run:
          command: mix deps.get && mix ecto.create && mix ecto.migrate
      - run:
          name: Start the childchain via development entrypoint
          command: iex -S mix
          background: true
      - run: sleep 10
      - pull_childchain_health
      - run:
          name: Now we shutdown all services
          command: |
            docker-compose down
            sleep 20
      - run:
          name: Restart all services
          background: true
          command: docker-compose up nginx postgres geth feefeed
      - run:
          name: Print running containers
          background: true
          command: docker ps
      - pull_childchain_health
      # at this point we reverse the startup order, first childchain then all services
      - run: sudo pkill beam
      - run:
          name: Now we shutdown all services
          command: |
            docker-compose down
            sleep 20
      - run:
          name: Start the childchain via development entrypoint
          command: iex -S mix
          background: true
      - run:
          name: Start all services
          background: true
          command: docker-compose up nginx postgres geth feefeed
      - run: sleep 20
      - pull_childchain_health

  test_docker_compose_reorg:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      REORG: true
      ENTERPRISE: 0
    steps:
      - checkout
      - install_rust
      - run: pip3 install docker-compose --upgrade
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - gcloud_login
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - run:
          name: Setup data dir
          command: |
            [ -d data1 ] || mkdir data1 && chmod 777 data1
            [ -d data2 ] || mkdir data2 && chmod 777 data2
            [ -d data ] || mkdir data && chmod 777 data
      - run: make docker-childchain
      - run:
          name: Start daemon services
          command: |
            make init_test_reorg
            # echo "VAULT_URL=https://172.27.0.111:8200" >> dynamic_env_vars.env
            # echo "INSECURE_VAULT_TLS=true" >> dynamic_env_vars.env
            echo "ENTERPRISE=0" >> dynamic_env_vars.env
            docker-compose -f docker-compose.yml -f docker-compose.reorg.yml -f docker-compose.specs.yml up -d || (START_RESULT=$?; docker-compose logs; exit $START_RESULT;)
      - run:
          name: Log
          command: docker-compose logs -f
          background: true
      - run:
          name: Print docker states
          command: |
            docker image ls
            docker-compose ps
      - install_elixir:
          cache: "specs"
          dir: "priv/cabbage"
      - run:
          name: Print watcher logs
          command: make cabbage-reorg-watcher-logs
          background: true
      - run:
          name: Print watcher_info logs
          command: make cabbage-reorg-watcher_info-logs
          background: true
      - run:
          name: Print childchain logs
          command: make cabbage-reorg-childchain-logs
          background: true
      - run:
          name: Print geth logs
          command: make cabbage-reorg-geth-logs
          background: true
      - run:
          name: Print reorg logs
          command: make cabbage-reorgs-logs
          background: true
      - run:
          name: Setup specs
          environment:
            CHILD_CHAIN_URL: http://127.0.0.1:9656/v1
            EXIT_ID_SIZE: "168"
            LOCALCHAIN_CONTRACT_ADDRESSES: "/home/circleci/project/localchain_contract_addresses.env"
            PLASMA_CONTRACTS_DIR: "/home/circleci/project/data/plasma-contracts/contracts/"
            FEE_CLAIMER_ADDRESS: "0x24F3402Cd22F03ff81B56941fE048AD0F4EED5A1"
            MIX_ENV: test
          command: |
            cd priv/cabbage
            make install
            make generate_api_code
            mix deps.get
            mix compile
          no_output_timeout: 30m
      - run:
          name: Run specs
          environment:
            CHILD_CHAIN_URL: http://127.0.0.1:9656/v1
            EXIT_ID_SIZE: "168"
            LOCALCHAIN_CONTRACT_ADDRESSES: "/home/circleci/project/localchain_contract_addresses.env"
            PLASMA_CONTRACTS_DIR: "/home/circleci/project/data/plasma-contracts/contracts/"
            FEE_CLAIMER_ADDRESS: "0x24F3402Cd22F03ff81B56941fE048AD0F4EED5A1"
          command: |
            cd priv/cabbage
            mix test --only deposit --trace
          no_output_timeout: 30m


  credo:
    working_directory: ~/childchain
    docker:
      - image: circleci/elixir:1.11.2
    environment:
      MIX_ENV: test
    steps:
      - checkout
      - add_rust_to_path
      - run: mix local.rebar --force && mix local.hex --force
      - restore_cache:
          key: v4-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run: mix do credo --strict, format --check-formatted --dry-run
      - run:
          name: "Consistent naming of TX_HASH - it's tx_hash not txhash"
          command: |
            export SHELL=/bin/bash
            set +eo pipefail
            _counter=$(grep -ri "txhash" . | grep -c "txhash")
            echo "Current occurrences of txhash:"
            echo $_counter
            if [ $_counter -gt 3 ]; then
              echo "Have you been naughty or nice? Find out if Santa knows."
              exit 1
            fi
      - run:
          name: "Consistent naming of CHILDCHAIN - it's childchain not child_chain or child-chain"
          command: |
            export SHELL=/bin/bash
            set +eo pipefail
            _counter=$(grep -ri --exclude-dir=./priv/cabbage "child_chain" . | grep -vi -e "child_chain_api" -e "child_chain_url" | grep -c "child_chain")
            echo "Current occurrences of child_chain:"
            echo $_counter
            if [ $_counter -gt 12 ]; then
              echo "Have you been naughty or nice? Find out if Santa knows."
              exit 1
            fi
            _counter=$(grep -ri "child-chain" . | grep -c "child-chain")
            echo "Current occurrences of child-chain:"
            echo $_counter
            if [ $_counter -gt 4 ]; then
              echo "Have you been naughty or nice? Find out if Santa knows."
              exit 1
            fi

  dialyzer:
    working_directory: ~/childchain
    docker:
      - image: circleci/elixir:1.11.2
    environment:
      MIX_ENV: dev
    steps:
      - checkout
      - install_rust
      - run: mix local.rebar --force && mix local.hex --force
      - restore_cache:
          key: v4-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - restore_cache:
          key: v1-dialyzer-plts-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - run:
          name: Unpack PLT cache
          command: |
            mkdir -p _build/dev
            cp plts/dialyxir*.plt _build/dev/ || true
            mkdir -p ~/.mix
            cp plts/dialyxir*.plt ~/.mix/ || true
      - run:
          name: Dialyzer
          command: |
            mix dialyzer
          no_output_timeout: 2400
      - run:
          name: Pack PLT cache
          command: |
            mkdir -p plts
            cp _build/dev/dialyxir*.plt plts/
            cp ~/.mix/dialyxir*.plt plts/
      - save_cache:
          key: v1-dialyzer-plts-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths:
            - "plts"

  publish_childchain:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      CHILDCHAIN_IMAGE_NAME: "childchain-v2"
      DOCKER_HUB_REPO: "omisego"
      GCS_REPO: "gcr.io/omisego-production"
    steps:
      - checkout
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          environment:
            ENTERPRISE: 0
          command: make docker-childchain CHILDCHAIN_IMAGE_NAME=$DOCKER_HUB_REPO/$CHILDCHAIN_IMAGE_NAME
      - run: IMAGE_NAME=$DOCKER_HUB_REPO/$CHILDCHAIN_IMAGE_NAME sh .circleci/ci_publish.sh
      - run: |
          echo $PRODUCTION_DOCKER_GCLOUD_KEY | gcloud auth activate-service-account --key-file=-
          gcloud -q auth configure-docker
      - run:
          environment:
            ENTERPRISE: 1
          command: make docker-childchain CHILDCHAIN_IMAGE_NAME=$GCS_REPO/$CHILDCHAIN_IMAGE_NAME
      - run: IMAGE_NAME=$GCS_REPO/$CHILDCHAIN_IMAGE_NAME sh .circleci/ci_publish.sh

workflows:
  version: 2
  build-test-lint:
    jobs:
      - build
      - test:
          requires:
            - build

      - integration
      - integration_send_raw_eth_transaction
      - integration_vault

      - test_docker_compose_release_private:
          requires:
            - build

      - test_docker_compose_release_public:
          requires:
            - build

      - test_docker_compose_reorg:
          requires:
            - build

      - development:
          requires:
            - build

      - credo:
          requires:
            - build

      - dialyzer:
          requires:
            - build

      - publish_childchain:
          context:
            - production-docker-push
          requires:
            [
              development,
              dialyzer,
              credo,
              integration,
              test,
              build
            ]
          filters: &master_and_version_branches_and_all_tags
            branches:
              only:
                - master
                # vMAJOR.MINOR (e.g. v0.1, v0.2, v1.0, v2.1, etc.)
                - /^v[0-9]+\.[0-9]+/
            tags:
              only:
                - /.+/
